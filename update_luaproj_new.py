#!/usr/bin/python# coding=utf-8#Copyright:     #File:          update_luaproj.py#Author:        Benny Wong#Email:         #Date:          2015-11-11#Description:   更新vs lua工程配置,避免手动增删工程文件import osimport ioimport refrom string import Template# 工程名称PROJECT_NAME = "scripts"# 解决方案名称SOLUTION_NAME = "develop"# 脚本目录SCRIPTS_PATH = os.path.join("Resource", "scripts")# 跳过目录列表INGONRE_DIRS = [".svn"]# content 格式WILDCARD_CONTENT = [".xml", ".def", ".png", ".ogg", ".mp3"]# compile 格式WILDCARD_COMPILE = [".lua"]# 项目工程文件OUTPUT_FILE_PROJ = os.path.join(SCRIPTS_PATH, PROJECT_NAME + ".luaproj")# 项目工程配置文件OUTPUT_FILE_CONFIG = os.path.join(SCRIPTS_PATH, PROJECT_NAME + ".config")# 解决方案文件OUTPUT_FILE_SLN = SOLUTION_NAME + ".sln"# 项目工程文件模板TEMPLATE_FILE_PROJ = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n\<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n\  <PropertyGroup>\n\    <Configuration Condition=\" \'$$(Configuration)\' == \'\' \">Debug</Configuration>\n\    <SchemaVersion>2.0</SchemaVersion>\n\    <ProjectGuid>E439935D-B2A2-46AE-856D-2AA408428F33</ProjectGuid>\n\    <!--$$guid1$$-->\n\    <ProjectHome>.</ProjectHome>\n\    <StartupFile>\n\    </StartupFile>\n\    <SearchPath>\n\    </SearchPath>\n\    <WorkingDirectory>.</WorkingDirectory>\n\    <OutputPath>.</OutputPath>\n\  </PropertyGroup>\n\  <PropertyGroup Condition=\" \'$$(Configuration)\' == \'Debug\' \">\n\    <DebugSymbols>true</DebugSymbols>\n\    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>\n\  </PropertyGroup>\n\  <PropertyGroup Condition=\" \'$$(Configuration)\' == \'Release\' \">\n\    <DebugSymbols>true</DebugSymbols>\n\    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>\n\  </PropertyGroup>\n\  <ItemGroup>\n\${FOLDER_LIST}  </ItemGroup>\n\  <ItemGroup>\n\${CONTENT_LIST}  </ItemGroup>\n\  <ItemGroup>\n\${COMPILE_LIST}  </ItemGroup>\n\  <Import Project=\"$$(MSBuildToolsPath)\Microsoft.Common.targets\" />\n\</Project>"# 项目工程配置文件模板TEMPLATE_FILE_CONFIG = "<?xml version=\"1.0\"?>\n\<Project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n\  <propertyGroup>\n\    <StartProgram>${EXE_POS}</StartProgram>\n\    <StartArguments />\n\    <StartWorkingDirectory />\n\  </propertyGroup>\n\</Project>"# 解决方案文件模板TEMPLATE_FILE_SLN = "Microsoft Visual Studio Solution File, Format Version 12.00\n\# Visual Studio 2013\n\VisualStudioVersion = 12.0.21005.1\n\MinimumVisualStudioVersion = 10.0.40219.1\n\Project(\"{5697748A-77EF-44CA-8824-4F5637E5945B}\") = \"${PROJ_NAME}\", \"${PROJ_POS}\", \"{E439935D-B2A2-46AE-856D-2AA408428F33}\"\n\EndProject\n\Global\n\    GlobalSection(SolutionConfigurationPlatforms) = preSolution\n\        Debug|Any CPU = Debug|Any CPU\n\        Release|Any CPU = Release|Any CPU\n\    EndGlobalSection\n\    GlobalSection(ProjectConfigurationPlatforms) = postSolution\n\        {E439935D-B2A2-46AE-856D-2AA408428F33}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\n\        {E439935D-B2A2-46AE-856D-2AA408428F33}.Debug|Any CPU.Build.0 = Debug|Any CPU\n\        {E439935D-B2A2-46AE-856D-2AA408428F33}.Release|Any CPU.ActiveCfg = Release|Any CPU\n\        {E439935D-B2A2-46AE-856D-2AA408428F33}.Release|Any CPU.Build.0 = Release|Any CPU\n\    EndGlobalSection\n\    GlobalSection(SolutionProperties) = preSolution\n\        HideSolutionNode = FALSE\n\    EndGlobalSection\n\EndGlobal"PREFIX_FOLDER = "    <Folder Include=\""PREFIX_CONTENT = "    <Content Include=\""PREFIX_COMPILE = "    <Compile Include=\""POSTFIX_COMMON = "\" />\n"# 输出文件列表def ListFileToStream(dir, streamFolder, streamContent, streamCompile):    for root, subdirs, files in os.walk(dir):        #文件        for path in files:            filePath = os.path.join(root, path)            outputPath = os.path.relpath(filePath, start=SCRIPTS_PATH)            if os.path.splitext(path)[-1] in WILDCARD_CONTENT:                streamContent.write(PREFIX_CONTENT + outputPath + POSTFIX_COMMON)            elif os.path.splitext(path)[-1] in WILDCARD_COMPILE:                streamCompile.write(PREFIX_COMPILE + outputPath + POSTFIX_COMMON)        #目录        for subdir in subdirs:            if subdir not in INGONRE_DIRS:                subdirPath =  os.path.join(root , subdir)                outputSubdirPath =  os.path.relpath(subdirPath, start=SCRIPTS_PATH)                # 输出目录列表                streamFolder.write(PREFIX_FOLDER + os.path.join(outputSubdirPath, POSTFIX_COMMON))                                # 搜索子目录                ListFileToStream(subdirPath, streamFolder, streamContent, streamCompile)        break# 输出项目配置def UpdateProjectConfig():    file_out = open(OUTPUT_FILE_PROJ, "w+")    if not file_out:        print("cannot open the file %s for writing " % OUTPUT_FILE_PROJ)        template_obj = Template(TEMPLATE_FILE_PROJ)    streamFolder = io.StringIO()    streamContent = io.StringIO()    streamCompile = io.StringIO()    ListFileToStream(SCRIPTS_PATH, streamFolder, streamContent, streamCompile)        streamFolder.seek(0)    streamContent.seek(0)    streamCompile.seek(0)    lines = []    lines.append(template_obj.substitute(        FOLDER_LIST = streamFolder.read(),        CONTENT_LIST = streamContent.read(),        COMPILE_LIST = streamCompile.read()))        file_out.writelines(lines)    streamFolder.close()    streamContent.close()    streamCompile.close()    file_out.close()# 输出项目路径配置def UpdateProjectConfigStartProgram():    file_out = open(OUTPUT_FILE_CONFIG, "w+")    template_obj = Template(TEMPLATE_FILE_CONFIG)    exeFile = os.path.join(os.path.abspath('.'), "Win32Player", "Win32Player.exe")    content = template_obj.substitute(EXE_POS = exeFile)        lines = []    lines.append(content)     file_out.writelines(lines)    file_out.close()# 输出解决方案配置def UpdateProjectSolution():    file_out = open(OUTPUT_FILE_SLN, "w+")    if not file_out:        print("cannot open the file %s for writing " % OUTPUT_FILE_SLN)        template_obj = Template(TEMPLATE_FILE_SLN)    lines = []    lines.append(template_obj.substitute(        PROJ_NAME = PROJECT_NAME,        PROJ_POS = OUTPUT_FILE_PROJ))        file_out.writelines(lines)    file_out.close()# -------------- main --------------if __name__ == '__main__':    UpdateProjectConfig()    UpdateProjectConfigStartProgram()    UpdateProjectSolution()    # os.system("pause")