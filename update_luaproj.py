#!/usr/bin/python# coding=utf-8#Copyright:     #File:          update_luaproj.py#Author:        Benny Wong#Email:         #Date:          2015-11-11#Description:   更新vs lua工程配置,避免手动增删工程文件import osimport iofrom string import TemplateRESOURCE_PATH = "Resource"# 指定要搜索的Resource子目录SEARCH_DIRS = ["editor", "scripts", "images", "audio"]# 跳过目录列表INGONRE_DIRS = [".svn"]# content 格式WILDCARD_CONTENT = [".xml", ".def", ".png", ".ogg", ".mp3"]# compile 格式WILDCARD_COMPILE = [".lua"]OUTPUT_FILE = r"develop_2.0.luaproj"TEMPLATE_FILE = r"develop_2.0.luaproj.template"PREFIX_FOLDER = "    <Folder Include=\""PREFIX_CONTENT = "    <Content Include=\""PREFIX_COMPILE = "    <Compile Include=\""POSTFIX_COMMON = "\" />\n"# 递归调用def ListFileToStreamFunc(dir, streamFolder, streamContent, streamCompile):    for root, subdirs, files in os.walk(dir):        #文件        for path in files:            if os.path.splitext(path)[-1] in WILDCARD_CONTENT:                streamContent.write(PREFIX_CONTENT + root + "\\" + path + POSTFIX_COMMON)            elif os.path.splitext(path)[-1] in WILDCARD_COMPILE:                streamCompile.write(PREFIX_COMPILE + root + "\\" + path + POSTFIX_COMMON)        #目录        for subdir in subdirs:            if subdir not in INGONRE_DIRS:                subdirPath = root + "\\" + subdir                # 输出目录列表                streamFolder.write(PREFIX_FOLDER + subdirPath + "\\" + POSTFIX_COMMON)                                # 搜索子目录                ListFileToStreamFunc(subdirPath, streamFolder, streamContent, streamCompile)        break# 只对Resource下指定子目录进行搜索def ListFileToStream(dir, streamFolder, streamContent, streamCompile):    for root, subdirs, files in os.walk(dir):        #文件        for path in files:            if os.path.splitext(path)[-1] in WILDCARD_CONTENT:                streamContent.write(PREFIX_CONTENT + root + "\\" + path + POSTFIX_COMMON)            elif os.path.splitext(path)[-1] in WILDCARD_COMPILE:                streamCompile.write(PREFIX_COMPILE + root + "\\" + path + POSTFIX_COMMON)        #目录        for subdir in subdirs:            if subdir in SEARCH_DIRS and subdir not in INGONRE_DIRS:                subdirPath = root + "\\" + subdir                # 输出目录列表                streamFolder.write(PREFIX_FOLDER + subdirPath + "\\" + POSTFIX_COMMON)                                # 搜索子目录                ListFileToStreamFunc(subdirPath, streamFolder, streamContent, streamCompile)        breakdef UpdateProjectConfig():    file_out = open(OUTPUT_FILE, "w")    file_template = open(TEMPLATE_FILE, "r")    if not file_out:        print("cannot open the file %s for writing " % OUTPUT_FILE)    if not file_template:        print("cannot open the file %s for reading " % TEMPLATE_FILE)               template_obj = Template(file_template.read())    streamFolder = io.StringIO()    streamContent = io.StringIO()    streamCompile = io.StringIO()    ListFileToStream(RESOURCE_PATH, streamFolder, streamContent, streamCompile)        streamFolder.seek(0)    streamContent.seek(0)    streamCompile.seek(0)    lines = []    lines.append(template_obj.substitute(        FOLDER_LIST = streamFolder.read(),        CONTENT_LIST = streamContent.read(),        COMPILE_LIST = streamCompile.read()))        file_out.writelines(lines)    streamFolder.close()    streamContent.close()    streamCompile.close()    file_out.close()    file_template.close()def UpdateProjectConfigStartProgram():    _abspath = os.path.abspath('.')    OUTPUT_FILE = r"develop_2.0.config"    TEMPLATE_FILE = r"develop_2.0.config.template"    file_out = open(OUTPUT_FILE, "w")    file_template = open(TEMPLATE_FILE,"r")    template_obj = Template(file_template.read())    _exe = _abspath + "\Win32Player\Win32Player.exe"    _content = template_obj.substitute(EXE_POS = _exe)        lines = []    lines.append(_content)     file_out.writelines(lines)    file_out.close()    file_template.close()# -------------- main --------------if __name__ == '__main__':    UpdateProjectConfig()    UpdateProjectConfigStartProgram()